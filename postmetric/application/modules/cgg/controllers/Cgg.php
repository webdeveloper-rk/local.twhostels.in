<?phpini_set('max_execution_time', 0); ini_set('memory_limit','2048M');
defined('BASEPATH') OR exit('No direct script access allowed'); 
class Cgg extends MX_Controller {
 function __construct()    {        // Construct the parent class        parent::__construct();		     }
 public function index(){	$this->savelog('Invalid Url');	header('HTTP/1.0 403 Forbidden'); 	//echo 'You are forbidden!';	//die;}
	public function service($type_of_request='')
	{		 $allowed_types = array('purchases','issues','openingbalance','items','vendors','get_item_details','get_vendor_details','attendance');        $username = trim($this->input->get_request_header('username'));		$password =  trim($this->input->get_request_header('password'));		  		 if(strtolower($this->input->method())!="post")		 {			$this->savelog('Invalid Method');			header("HTTP/1.0 405 Method Not Allowed"); 			die;		 }		 if(  !in_array($type_of_request, $allowed_types))		{			$this->savelog('Invalid Url');			header("HTTP/1.0 404 Not Found"); 			die;		}		if($username == "" || $password ==""    )		{			$this->savelog('Header Parameters missing');						header('HTTP/1.0 400 Bad Request'); 			send_json_result([                'error_code' =>  400 ,                                'message' => 'Header Parameters missing'            ] ); // NOT_FOUND (404) being the HTTP response code		}				//Check access 		$user_access_rs = $this->db->query("select * from cgg_webservice_credentials where username=? and password=?",array($username,$password));		if($user_access_rs->num_rows()==0)		{			$this->savelog('Invalid credentials');			header('HTTP/1.0 401 Unauthorized Access'); 			send_json_result([                'error_code' =>  401 ,                 'message' => 'Access denied - invalid credentials - '.$this->input->ip_address()            ] );			die;		}		 				$ehostels_rs = $this->db->query("select * from cgg_ehostels");		$ehostel_ids = array();		foreach($ehostels_rs->result() as $erow)		{			$ehostel_ids[$erow->ddo_code] = $erow->ehostel_id;		}						switch(trim($type_of_request))		{				case 'items':								 								$rset = $this->db->query("select  item_id,item_name from items" );								$results = array(); 									foreach($rset->result() as $row)									{ 										$results[] = $row;									} 						break;										case 'vendors':								 								$rset = $this->db->query("select  vendor_annapurna_id,school_id as annapurna_school_id,vendor_type,ehostel_id,ehostel_vendor_id,vendor_name,business_nature,tin_number,vendor_address,vendor_contact_number,supplier_name,supplier_contact_number,vendor_bank,vendor_bank_branch,vendor_bank_ifsc,vendor_account_number,supplier_aadhar_number  from tw_vendors  "  );								$results =  array();								 									foreach($rset->result() as $row)									{ 										$results[] = $row;									} 									 						break;											case 'get_item_details':										$item_id =  intval($this->input->post('item_id')); 								$rset = $this->db->query("select  item_id,item_name from items where item_id=?",array($item_id) );								$results = array();								if($rset->num_rows()==0)								{									$results['status'] = false;									$results['msg'] = "Item not found";								}else{									$results =$rset->row();									$results->status =true;								}									 						break;			 				case 'get_vendor_details':								 $vendor_annapurna_id =  intval($this->input->post('vendor_annapurna_id')); 								$rset = $this->db->query("select  vendor_annapurna_id,school_id as annapurna_school_id,vendor_type,ehostel_id,ehostel_vendor_id,vendor_name,business_nature,tin_number,vendor_address,vendor_contact_number,supplier_name,supplier_contact_number,vendor_bank,vendor_bank_branch,vendor_bank_ifsc,vendor_account_number,supplier_aadhar_number  from tw_vendors where vendor_annapurna_id=?",array($vendor_annapurna_id) );								$results = array();								if($rset->num_rows()==0)								{									$results['status'] = false;									$results['msg'] = "vendor details not found";								}else{									$results =$rset->row();									$results->status =true;								}									 						break;									case 'purchases':								$date =  trim($this->input->post('date'));								$this->validateDate($date);																$vendor_data = array();								$vendor_rs = $this->db->query("select * from tw_vendors");								foreach($vendor_rs->result() as $row)								{									$vendor_data[$row->vendor_annapurna_id] = $row;								}																$rset = $this->db->query("select 																sc.name as hostel_name,																sc.school_code as ddocode,																it.item_id as item_id,																it.item_name as item_name,																bs.purchase_biil_no as purchase_biil_no,																bs.vendor_annapurna_id  as vendor_annapurna_id, 																entry_date as purchase_date,																purchase_quantity as purchase_quantity,																TRUNCATE(purchase_price ,2) as purchase_rate, 																TRUNCATE((purchase_quantity * purchase_price),2) as total_amount ,																'Not available' as ehostel_vendor_id  ,																'Not available' as vendor_name,																'Not available' as vendor_type																 																from 																balance_sheet bs inner join schools sc on sc.school_id = bs.school_id 																inner join items it on it.item_id = bs.item_id 																																where bs.entry_date=? and purchase_quantity>0  and school_code !='85000'",array( $date));								$results = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$row->sno = $sno;										if( array_key_exists($row->vendor_annapurna_id,$vendor_data)){													$row->ehostel_vendor_id =  $vendor_data[$row->vendor_annapurna_id]->ehostel_vendor_id;													$row->vendor_name =  $vendor_data[$row->vendor_annapurna_id]->vendor_name;													$row->vendor_type =  $vendor_data[$row->vendor_annapurna_id]->vendor_type;																							}										$row->ehostel_id = $this->eshotel_id($ehostel_ids,$row->ddocode);										$results[] = $row;										$sno++;									} 						break;												case 'issues':								$date =  trim($this->input->post('date'));								$this->validateDate($date);								$rset = $this->db->query("select 																sc.name as hostel_name,																sc.school_code as ddocode,																it.item_id as item_id, 																it.item_name as item_name, 																entry_date as issue_date,																(session_1_qty+session_2_qty+session_3_qty+session_4_qty) as issued_quantity, TRUNCATE((session_1_qty*session_1_price+session_2_qty*session_2_price+session_3_qty*session_3_price+session_4_qty*session_4_price),2) as total_amount,																TRUNCATE((session_1_qty*session_1_price+session_2_qty*session_2_price+session_3_qty*session_3_price+session_4_qty*session_4_price),2) / (session_1_qty+session_2_qty+session_3_qty+session_4_qty) as rate 																																from 																balance_sheet bs inner join schools sc on sc.school_id = bs.school_id 																inner join items it on it.item_id = bs.item_id where bs.entry_date=? and (session_1_qty+session_2_qty+session_3_qty+session_4_qty)>0  and school_code !='85000'",array( $date));								//echo $this->db->last_query();								$results = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$row->sno = $sno;										$row->ehostel_id = $this->eshotel_id($ehostel_ids,$row->ddocode);										$issue_rate = $row->total_amount/$row->issued_quantity ;										 $row->rate = number_format((float)$issue_rate, 2, '.', '');  										$results[] = $row;										$sno++;									} 						break;						case 'openingbalance':					//echo $this->input->ip_address();die;										$month =  intval($this->input->post('month'));										if($month<10)												$month = "0".$month;																																$year =  intval($this->input->post('year'));										$month_start_date = $year."-".$month."-01";										$this->validateDate($month_start_date);																													//check below month start date purchases									$purchases = array();									$prs= $this->db->query("select * from purchases where purchase_date<? order by purchase_date desc ",array($month_start_date));									foreach($prs->result() as $pur_row)									{										$purchases[$pur_row->school_id][$pur_row->item_id][] = array('qty'=>$pur_row->quantity,'purchase_price'=>$pur_row->purchase_price,'purchase_date'=>$pur_row->purchase_date);									}									//print_a($purchases,1);																																																										//month starting date 										$rset = $this->db->query("select 																sc.name as hostel_name,																sc.school_id as school_id,																sc.school_code as ddocode,																it.item_id as item_id, 																it.item_name as item_name,  																opening_quantity as opening_balance_quantity   																from 																balance_sheet bs inner join schools sc on sc.school_id = bs.school_id 																inner join items it on it.item_id = bs.item_id where bs.entry_date=?  and school_code !='85000'",array( $month_start_date)); 								//echo $this->db->last_query();																$results = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$opening_balance  = $row->opening_balance_quantity;																				$opening_price = $this->get_price_detais($row->school_id,$row->item_id,$opening_balance,$purchases);																				$opening_total_amount = $opening_balance  *$opening_price;										$row->month = $month; 										$row->year = $year; 										$row->sno = $sno; 										$row->ehostel_id = $this->eshotel_id($ehostel_ids,$row->ddocode);										$row->opening_price  =$opening_price  ;										$row->opening_total_amount  =$opening_total_amount  ;										$results[] = $row;										$sno++;									}									//print_a($results,1);																  						break;																case 'attendance':					//print_a($_POST,1);					$year =  intval(trim($this->input->post('year')));					$month =  intval(trim($this->input->post('month')));													if($year == 0 && $month ==0    )					{						$this->savelog('Input  Parameters  year and month missing');												header('HTTP/1.0 400 Bad Request'); 						send_json_result([							'error_code' =>  400 ,														'message' => 'Input  Parameters  year and month missing'						] ); // NOT_FOUND (404) being the HTTP response code					}													$results = array();																if($month<10)										$month  = "0".$month;																	$date = $year."-".$month."-01";								$ddo_codes = array();								$ehostel_ids  = array();								$ddo_rs = $this->db->query("select * from schools where is_school='1'");								foreach($ddo_rs->result() as $ddorow)								{									$ddo_codes[$ddorow->school_id] = $ddorow->school_code;									$ehostel_ids[$ddorow->school_id] = $ddorow->ehostel_id;								}																//$this->validateDate($date);								$rset = $this->db->query("select school_id, 								sum(cat1_attendence) as cat1_attendence,								sum(cat1_guest_attendence) as cat1_guest_attendence,								sum(cat2_attendence) as cat2_attendence,								sum(cat2_guest_attendence) as cat2_guest_attendence								from school_attendence where entry_date between ? and last_day(?) group by school_id ",array($date,$date));								 //echo $this->db->last_query();die;								foreach($rset->result() as $att_row)								{									$row = array();									$row['ehostel_id']  =  @$ehostel_ids[$att_row->school_id] ;									$row['ddo_code']  =  @$ddo_codes[$att_row->school_id];									$row['year']  = $year;									$row['month']  = $month;									$row['cat1_total']  = $att_row->cat1_attendence;									$row['cat1_guest_total']  = $att_row->cat1_guest_attendence;									$row['cat2_total']  = $att_row->cat2_attendence;									$row['cat2_guest_total']  = $att_row->cat2_guest_attendence;									$row['total_attendance']  = $att_row->cat1_attendence + $att_row->cat1_guest_attendence+ $att_row->cat2_attendence+$att_row->cat2_guest_attendence;																		$biometric_attendance = $this->biometric($date,$att_row->school_id);									 $row['biometric'] = $biometric_attendance ; 									$results[]  = $row;																		 									 								}								 								break;				default:$this->savelog('Invalid Url');						break; 		}						 		$this->savelog('Response sent');	 		send_json_result($results); 	}			private function savelog($permited = '')	{		$params['posted_data'] = $_POST;		$params['username'] = $this->input->get_request_header("username");		$params['password'] = $this->input->get_request_header("password");				$insert_data = array('url_accessed'=>current_url(),							'parameters'=>serialize($params),							'permitted'=>$permited,							'ip_address'=>$this->input->ip_address()							);		$this->db->insert("cgg_webservice_logs",$insert_data);					}	private function validateDate($date, $format = 'Y-m-d')	{		$d = DateTime::createFromFormat($format, $date);		// The Y ( 4 digits year ) returns TRUE for any integer with any number of digits so changing the comparison from == to === fixes the issue.		$flag = $d && $d->format($format) === $date;		if(!$flag)		{					$this->savelog('Invalid Date format');			header('HTTP/1.0 400 Bad Request'); 			send_json_result([                'error_code' =>  400 ,                                'message' => 'Invalid Date format'            ] );		}	}	private function eshotel_id($ddo_codes=array(),$ddocode)	{		// echo $ddocode;		//print_a($ddo_codes,1);		if(array_key_exists($ddocode,$ddo_codes))  		{			$ehostel_id = $ddo_codes[$ddocode];		}else{			$ehostel_id = "Not Found";		}		return $ehostel_id;	}	private function get_price_detais($school_id,$item_id,$ob_qty,$purchased_data=array())	{		 // echo $ob_qty; 		 $cbalance = $ob_qty;		$purchase_entries = $purchased_data[$school_id][$item_id];		$usable_entries= array();		 $final_price = 0;				if(isset($purchase_entries )){				foreach($purchase_entries  as $row)				{										$ctemp  =  $cbalance;					$cbalance = $cbalance - $row['qty'];					if($cbalance<0)					{						$allowed_to_use  = $ctemp;					}					else {												$allowed_to_use  =  $row['qty'];					}										 					if($allowed_to_use>0){						$usable_entries[] = array('purchase_quantity'=>$row['qty'],'remaing_to_use'=>$allowed_to_use,'purchase_price'=>$row['purchase_price'],'purchase_date'=>$row['purchase_date']);					}					 if($cbalance<0)					{						 break;					}					 				}				$total_quantity = 0;				$total_price = 0;				// print_a($usable_entries);				foreach($usable_entries as $trow)				{					 					$total_quantity = $total_quantity + $trow['remaing_to_use'];					 $total_price =  $total_price +  ($trow['remaing_to_use'] *  $trow['purchase_price']);									}				//echo "<br>",$total_quantity ,"---",$total_price; 				$final_price = $total_price/$total_quantity;				 		}else		{			$final_price = 0;//or else check atleast one price 		}		//echo "::",$final_price,"--<br>"; 		return floatval($final_price);					}	private function biometric($date,$school_id)	{		 		//return array();		$ddo_codes = array();		$ehostel_ids  = array();		$ddo_rs = $this->db->query("select * from schools where is_school='1'");		foreach($ddo_rs->result() as $ddorow)		{			$ddo_codes[$ddorow->school_id] = $ddorow->school_code;			$ehostel_ids[$ddorow->school_id] = $ddorow->ehostel_id;		}										$rset = $this->db->query("select school_id, classwise_data,entry_date  from school_attendence 												where entry_date between ? and last_day(?)  and school_id=?  ",array($date,$date,$school_id));								 				$ehostel_biometric= array();								foreach($rset->result() as $att_row)				{					$row = array();					$school_id  = $att_row->school_id;					$row['ehostel_id']  =  @$ehostel_ids[$att_row->school_id] ;					$row['ddo_code']  =  @$ddo_codes[$att_row->school_id]; 					 $class_wise_biometric = array("1"=>0,"2"=>0,"3"=>0,"4"=>0,"5"=>0,"6"=>0,"7"=>0,"8"=>0,"9"=>0,"10"=>0);					$classes_serelized = unserialize($att_row->classwise_data); 					 foreach($class_wise_biometric as $class_key=>$class_count)					 {						$class_wise_biometric[$class_key] = intval(@$classes_serelized[$class_key]);					 } 					 $classes_array = array();					 foreach($class_wise_biometric as $class_key=>$class_count)					 {						$previous_count =  intval(@$ehostel_biometric['class_'.$class_key."_count"] ); 						$ehostel_biometric['class_'.$class_key."_count"] = $previous_count +  $class_count; 					 } 				}				 								return $ehostel_biometric;				 	}
}
