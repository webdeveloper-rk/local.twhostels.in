<?phpini_set('max_execution_time', 0); ini_set('memory_limit','2048M');
defined('BASEPATH') OR exit('No direct script access allowed'); 
class Formsdata extends MX_Controller {
 function __construct()    {        // Construct the parent class        parent::__construct();		 if(strtolower($this->input->method())!="post")		{			$this->savelog('Invalid Method');			header("HTTP/1.0 405 Method Not Allowed"); 			die;		}    }
 public function index(){	$this->savelog('Invalid Url');	header('HTTP/1.0 403 Forbidden'); }
	public function vendor_purchases()
	{		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);			$vendor_data = array();		$vendor_rs = $this->db->query("select *,IFNULL(vendor_contact_number,0) as vendor_contact_number from tw_vendors where school_id=?",$school_info->school_id);		foreach($vendor_rs->result() as $row)		{				$vendor_data[$row->vendor_annapurna_id] = $row;		}				$rset = $this->db->query("select school_id,vendor_annapurna_id,sum(TRUNCATE((quantity * purchase_price),0)) as total_amount  from 									purchases where school_id = ?  and quantity>0  									and purchase_date between ? and ? and item_id not in (select item_id from civil_supplier_items) 									group by vendor_annapurna_id ",array($school_info->school_id,$start_date,$end_date));											//echo $this->db->last_query();										$results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name,													"ddo_code"=>$school_info->school_code,													"vendors"=>array());								$sno =1 ;																	foreach($rset->result() as $row)									{										$row->sno = $sno;										 $vendors = array();													$vendors['vendor_amount'] =   $row->total_amount ; 													$vendors['vendor_annapurna_id'] =   $row->vendor_annapurna_id ; 													$vendors['vendor_name'] =   $vendor_data[$row->vendor_annapurna_id]->vendor_name ; 													$vendors['vendor_account_number'] =   $vendor_data[$row->vendor_annapurna_id]->vendor_account_number ; 													$vendors['vendor_bank_ifsc'] =   $vendor_data[$row->vendor_annapurna_id]->vendor_bank_ifsc ; 																										$mobile_number = $vendor_data[$row->vendor_annapurna_id]->vendor_contact_number;													if(strlen($mobile_number)==0)															$mobile_number = 0;																																							if(strlen($mobile_number)>11)															$mobile_number = substr($mobile_number,0,11);																											if(strlen($mobile_number)<10){														$missing_numbers = 10- strlen($mobile_number);														$prefix = '';														for($i=0;$i<$missing_numbers;$i++)														{															$prefix = $prefix ."0"; 														}																													$mobile_number = $prefix.$mobile_number;														}																										$vendors['vendor_mobile_number'] =   $mobile_number ; 											$results['vendors'][] = $vendors;									} 											 		$this->savelog('Response sent');	 		send_json_result($results); 	}				public function attendance()	{		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);	$results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name ,													"ddo_code"=>$school_info->school_code,													'attendance'=>array()															);		 		//$this->validateDate($date);								$rset = $this->db->query("select school_id, 								sum(cat1_attendence) as cat1_attendence,								sum(cat1_guest_attendence) as cat1_guest_attendence,								sum(cat2_attendence) as cat2_attendence,								sum(cat2_guest_attendence) as cat2_guest_attendence								from school_attendence where school_id=? and entry_date between ? and ? group by school_id ",								array($school_info->school_id,$start_date,$end_date));								 //echo $this->db->last_query();die;								foreach($rset->result() as $att_row)								{									 									$row = array();									 									$row['cat1_total']  = $att_row->cat1_attendence;									$row['cat1_guest_total']  = $att_row->cat1_guest_attendence;									$row['cat2_total']  = $att_row->cat2_attendence;									$row['cat2_guest_total']  = $att_row->cat2_guest_attendence;									$row['total_attendance']  = $att_row->cat1_attendence + $att_row->cat1_guest_attendence+ $att_row->cat2_attendence+$att_row->cat2_guest_attendence;									 									 $biometric_attendance = $this->biometric($start_date,$att_row->school_id);									 $row['biometric'] = $biometric_attendance ; 									$results['attendance'][]  = $row;									 									 									 								}											 		$this->savelog('Response sent');	 		send_json_result($results); 	}					function balance_sheet()	{		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);		$school_id = $school_info->school_id;		 $results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name ,													"ddo_code"=>$school_info->school_code,													'items'=>array()															);															$item_names   = array();		$data = array();		$display_unused_items = false;				 				$data['display_unused_items'] = $display_unused_items;								$opening_qty = 0;				$opening_price = 0;				$items = array();								//get all items between dates 				  $sql = "SELECT distinct bs.item_id,item_name   FROM `balance_sheet`  bs inner join items on items.item_id=bs.item_id  				WHERE bs.school_id=? and  bs.entry_date between ? and ?";				$rs  = $this->db->query($sql,array($school_id,$start_date,$end_date ));				$item_ids  = array();								foreach($rs->result() as $row)				{					$item_ids[] = $row->item_id;					$item_names[$row->item_id] = $row->item_name;				}								//check below month start date purchases				$ob_purchases = array();				$prs= $this->db->query("select * from purchases where purchase_date<? and school_id=? order by purchase_date desc ",array($start_date,$school_id));				foreach($prs->result() as $pur_row)				{					$ob_purchases[$pur_row->school_id][$pur_row->item_id][] = array('qty'=>$pur_row->quantity,'purchase_price'=>$pur_row->purchase_price,'purchase_date'=>$pur_row->purchase_date);				}								//check below month start date purchases				$cb_purchases = array();				$prs= $this->db->query("select * from purchases where purchase_date <=? and school_id=? order by purchase_date desc ",array($end_date,$school_id));				foreach($prs->result() as $pur_row)				{					$cb_purchases[$pur_row->school_id][$pur_row->item_id][] = array('qty'=>$pur_row->quantity,'purchase_price'=>$pur_row->purchase_price,'purchase_date'=>$pur_row->purchase_date);				}				//echo $this->db->last_query();die;												 				   					//opening balance calculation 					$ob_rs = $this->db->query("select it.item_name,bs.item_id,bs.closing_quantity as opening_quantity from  balance_sheet bs inner join (select item_id,max(entry_date) as entry_date from balance_sheet where entry_date<?  and school_id=? and item_id>0 group by item_id )as cb on bs.item_id = cb.item_id and bs.entry_date = cb.entry_date inner join items it on it.item_id = bs.item_id where bs.school_id = ? ",array($start_date,$school_id,$school_id));foreach($ob_rs->result() as $ob_row){		$opening_price = $this->get_price_detais($school_id,$ob_row->item_id,$ob_row->opening_quantity,$ob_purchases);												$items[$ob_row->item_id]['opening_quantity'] = round($ob_row->opening_quantity,2);		$items[$ob_row->item_id]['opening_price'] = round($opening_price,2);		$items[$ob_row->item_id]['opening_total'] = round(($ob_row->opening_quantity * $opening_price),2);}				 					 					//closing balance calculation 					$cb_rs = $this->db->query("select it.item_name,bs.item_id,bs.closing_quantity as closing_quantity from  balance_sheet bs inner join (select item_id,max(entry_date) as entry_date from balance_sheet where entry_date<=?  and school_id=? and item_id>0 group by item_id )as cb on bs.item_id = cb.item_id and bs.entry_date = cb.entry_date inner join items it on it.item_id = bs.item_id where bs.school_id = ? ",array($end_date,$school_id,$school_id));foreach($cb_rs->result() as $cb_row){		$closing_price = $this->get_price_detais($school_id,$cb_row->item_id,$cb_row->closing_quantity,$cb_purchases);		$items[$cb_row->item_id]['closing_quantity'] = round($cb_row->closing_quantity,2);		$items[$cb_row->item_id]['closing_price'] = round($closing_price,2);		$items[$cb_row->item_id]['closing_total'] = round( ($closing_price * $cb_row->closing_quantity),2);}						//print_a($items,1);												/* end of closing balances */									/* calculate consumption data 				*/								/*$sql = "select item_id,sum(( session_1_qty+session_2_qty+session_3_qty+session_4_qty)) as consumed_qty ,						truncate(sum(							( 	(session_1_qty*session_1_price) + 								(session_2_qty*session_2_price) + 								(session_3_qty*session_3_price) + 								(session_4_qty*session_4_price) )							),2) as consumed_total						from balance_sheet					where school_id=? and  entry_date between ? and  ? group by item_id";					*/									$sql = "select item_id,sum(( session_1_qty+session_2_qty+session_3_qty+session_4_qty)) as consumed_qty ,						  sum(							( 	(session_1_qty*session_1_price) + 								(session_2_qty*session_2_price) + 								(session_3_qty*session_3_price) + 								(session_4_qty*session_4_price) 								)							)  as consumed_total						from balance_sheet					where school_id=? and  entry_date between ? and  ? group by item_id";										 $rs  = $this->db->query($sql,array($school_id,$start_date,$end_date));				foreach($rs->result() as $row)				{					$items[$row->item_id]['consumed_quantity'] = round($row->consumed_qty,2);					$items[$row->item_id]['consumed_total'] = round($row->consumed_total,2);					$items[$row->item_id]['consumed_rate'] = round($row->consumed_total/$row->consumed_qty,2);					 				}					/*		calculate purchase data 		*/				/*$sql ="select item_id,sum(purchase_quantity) as purchase_qty, 									truncate(sum((purchase_quantity*purchase_price)),2) purchase_total from balance_sheet 							where school_id=? and entry_date between ? and ? group by item_id";	*/											$sql ="select item_id,sum(purchase_quantity) as purchase_qty, 									 sum((purchase_quantity*purchase_price))  purchase_total from balance_sheet 							where school_id=? and entry_date between ? and ? group by item_id";				 						$rs  = $this->db->query($sql,array($school_id,$start_date,$end_date));				foreach($rs->result() as $row)				{					$items[$row->item_id]['purchase_price'] = round(floatval($row->purchase_total/$row->purchase_qty),2);					$items[$row->item_id]['purchase_qty'] = round($row->purchase_qty,2);					$items[$row->item_id]['purchase_total'] = round($row->purchase_total,2);					 				}													 /* end purchase data */				 				 //rearrange items array , check all keys exists or not if not add trhem				 				  $items_dup = $items;				 foreach($items_dup as $item_id=>$itemobj)				 {					 					 $cols =  array(								'opening_quantity',								'opening_price',								'opening_total',								'purchase_price',								'closing_quantity',								'closing_price',								'closing_total',								'consumed_quantity',								'consumed_total',								'purchase_qty',								'purchase_total',								'total_qty',								'total_price');								foreach($cols as $column){										 if(!array_key_exists( $column,$itemobj))												$items[$item_id][ $column] = '0';								}																 }				 /* calaculate Total from opeinig balance and purchase balance */				 $items_dup = $items;				 foreach($items_dup as $item_id=>$itemobj)				 {					// echo $item_id;					 				//print_a($item_id,1);						$items[$item_id]['total_qty'] =   $tot_qty =  ($itemobj['purchase_qty'] +  $itemobj['opening_quantity']);						$items[$item_id]['total_price'] =  $tot_price =   round($itemobj['purchase_total'] +  $itemobj['opening_total'],2);						if($tot_qty>0)						{							$total_rate  =  $tot_price/$tot_qty ;						}						else{							$total_rate  =  0;						} 						$items[$item_id]['total_rate'] =   round($total_rate,2);										 }				 				$data["display_result"] = true;				$data['rfrom_date'] = $start_date;				$data['rto_date'] = $end_date;				$data['items'] = $items;				$data['fromdate'] = date('m/d/Y',strtotime($start_date));				$data['todate'] =  date('m/d/Y',strtotime($end_date));								$data['f_fromdate'] = date('d-M-Y',strtotime($start_date));				$data['f_todate'] =  date('d-M-Y',strtotime($end_date));								$data["school_name_rs"] = $this->db->query("select * from  schools where school_id=?",array($school_id));; 				$data["school_name"] =  $data["school_name_rs"]->row()->school_code." - ". $data["school_name_rs"]->row()->name; 								 					$filedata['fromdate'] = date('d-M-Y',strtotime($start_date));					$filedata['todate'] =  date('d-M-Y',strtotime($end_date));					$filedata['sname'] = $data["school_name"];					//$this->consolidated_report($items,$filedata,$item_names);					$items_new = array();					foreach($items as $item_id=>$item_info)					{ 												$item_info['item_id'] = $item_id;						$item_info['item_name'] = $item_names[$item_id];						$items_new[]  = $item_info;					}					 $results['items'] = $items_new;					$this->savelog('Response sent'); 					send_json_result($results); 		 						 		  	}													public function itemwise_consumption()	{		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}				 $sql = "SELECT  item_id,item_name   FROM  items ";				$rs  = $this->db->query($sql);				$item_names  = array();								foreach($rs->result() as $row)				{  					$item_names[$row->item_id] = $row->item_name;				}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);	$results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name ,													"ddo_code"=>$school_info->school_code,													'total_attendance'=>'',															'items'=>array()															);		$rset = $this->db->query("select school_id, 							sum(cat1_attendence + cat1_guest_attendence  + cat2_attendence +cat2_guest_attendence ) as total_attendence								 							from school_attendence where school_id=? and entry_date between ? and ? group by school_id having total_attendence>0 ",							array($school_info->school_id,$start_date,$end_date));				$results['total_attendance'] = $rset->row()->total_attendence;				$items = array();					$items_list = array();	$school_id = $school_info->school_id;$sql = "select item_id,sum(( session_1_qty+session_2_qty+session_3_qty+session_4_qty)) as consumed_qty ,						  sum(							( 	(session_1_qty*session_1_price) + 								(session_2_qty*session_2_price) + 								(session_3_qty*session_3_price) + 								(session_4_qty*session_4_price) 								)							)  as consumed_total						from balance_sheet					where school_id=? and  entry_date between ? and  ? group by item_id having consumed_total>0";										 $rs  = $this->db->query($sql,array($school_id,$start_date,$end_date));				foreach($rs->result() as $row)				{					$items = array();						$items['item_id'] = $row->item_id;					$items['item_name'] = $item_names[$row->item_id];					$items['consumtion_as_per_norms'] = "NA";					$items['consumed_quantity'] = round($row->consumed_qty,2);					$items['consumed_total_amount'] = round($row->consumed_total,2);					$items['consumed_rate'] = round($row->consumed_total/$row->consumed_qty,2);					 $items_list[] = $items;				}			$results['items'] = 	$items_list;														 		$this->savelog('Response sent');	 		send_json_result($results); 	}						public function hostel_purchases()	{		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);		$school_id  = $school_info->school_id;	$results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name ,													"ddo_code"=>$school_info->school_code 										);				$vendor_data = array();								$vendor_rs = $this->db->query("select * from tw_vendors ");								foreach($vendor_rs->result() as $row)								{									$vendor_data[$row->vendor_annapurna_id] = $row;								}																$rset = $this->db->query("select 																 																it.item_id as item_id,																it.item_name as item_name,																IFNULL(bs.purchase_biil_no,0) as purchase_biil_no,																bs.vendor_annapurna_id  as vendor_annapurna_id, 																entry_date as purchase_date,																TRUNCATE(purchase_quantity ,2) as purchase_quantity,																TRUNCATE(purchase_price ,2) as purchase_rate, 																TRUNCATE((purchase_quantity * purchase_price),2) as total_amount  																 																from 																balance_sheet bs inner join schools sc on sc.school_id = bs.school_id 																inner join items it on it.item_id = bs.item_id 																																where bs.school_id=? and bs.entry_date between ? and ? and purchase_quantity>0  ",																array( $school_id,$start_date,$end_date));								$results_items_list = array();								$sno =1 ;									foreach($rset->result() as $row)									{										$row->sno = $sno;										if( array_key_exists($row->vendor_annapurna_id,$vendor_data)){													 													$row->vendor_name =  $vendor_data[$row->vendor_annapurna_id]->vendor_name;													//$row->vendor_type =  $vendor_data[$row->vendor_annapurna_id]->vendor_type;																							}										else if($row->vendor_annapurna_id == -2)										{											$row->vendor_name = "Civil Suppliers";										}else{											$row->vendor_name = "NA";										}										 if($row->purchase_biil_no=="")											 $row->purchase_biil_no = "0";										$results_items_list[] = $row;										$sno++;									}	$results['items'] = $results_items_list;$this->savelog('Response sent');	 		send_json_result($results); 																							}	 public function hostel_eligibility()	{		//FORM IV 		$this->check_access();		$ehostel_id =  intval(trim($this->input->post('ehostel_id')));		$month =  intval(trim($this->input->post('month')));		$year =  intval(trim($this->input->post('year')));		if($month<10){				$month = "0".$month;		}		if($ehostel_id == 0 || $month ==0 || $year ==0)		{			$this->savelog('Invalid Input');			header('HTTP/1.0 405 Invalid Input'); 			send_json_result([                'error_code' =>  405 ,                 'message' => 'Please fill all required fields ehostel_id,month,year'            ] );			die;		}					$start_date = $year."-".$month."-01"; 		$end_date = $this->db->query("select last_day(?) as last_date ",array($start_date))->row()->last_date; 		$school_info = $this->get_school_info($ehostel_id);		$school_id  = $school_info->school_id;		$results = array('month'=>$month,"year"=>$year,"ehostel_id"=>$ehostel_id,													"institution_name"=>$school_info->name ,													"ddo_code"=>$school_info->school_code  );		//Attendance cat 1 + cat 2 																										$rset = $this->db->query("select school_id, 							sum(cat1_attendence + cat1_guest_attendence  + cat2_attendence +cat2_guest_attendence ) as total_attendence								 							from school_attendence where school_id=? and entry_date between ? and ? group by school_id   ",							array($school_info->school_id,$start_date,$end_date));				$results['total_attendance'] = $rset->row()->total_attendence;				/* Total Amount of Eligibility */		$list_of_params = $this->get_eligible_amounts($school_info->school_id,$start_date,$end_date);				$results = array_merge($results,$list_of_params);		$this->savelog('Response sent');	 		send_json_result($results); 						}			/***********************************************************************************************	 ***********************************************************************************************	 ***********************************************************************************************/	 	 private function get_eligible_amounts($school_id,$start_date,$end_date)	 {		 $data = array();		$srs = $this->db->query("select * from schools where school_id=?",array($school_id));		$sch_data = $srs->row();		$school_amount_category = $sch_data->amount_category;		$price_sql = "select * from group_prices  where category=? and ? between start_date and end_date";		$price_rs = $this->db->query($price_sql,array($school_amount_category,$start_date));		// echo $this->db->last_query();		$student_prices = array();		foreach($price_rs->result() as $stu_price){			$student_prices[$stu_price->group_code] = $stu_price->amount;		}		//print_a($student_prices);		$data['student_prices'] = $student_prices;								$days_sql = "SELECT DAY( LAST_DAY( ? )) as days";		$days_row  = $this->db->query($days_sql,$start_date)->row();		$days_count = $days_row->days ;		$data['days_count'] = $days_count;				/*********************/		$group_1_per_day= $student_prices['gp_5_7']/$days_count;		$group_2_per_day= $student_prices['gp_8_10']/$days_count;		$group_3_per_day= $student_prices['gp_inter']/$days_count;						$data['group_1_per_day'] = $group_1_per_day;		$data['group_2_per_day'] = $group_2_per_day;		$data['group_3_per_day'] = $group_3_per_day;				/*//////////////////////////*/		/******get attendence ******/					$attendece  = 0;		$group_1_attendence = 0;		$group_2_attendence = 0;		$group_3_attendence = 0;		$group_1_price = 0;		$group_2_price = 0;		$group_3_price = 0;				 		$days_sql = "SELECT DAY( LAST_DAY( '$start_date' ) ) as days";		$days_row  = $this->db->query($days_sql)->row();		  $days_count = $days_row->days ;		//print_a($student_prices);		  $atters_sql = "select 								sum(cat1_attendence + cat1_guest_attendence) as grp1_count,								sum(cat2_attendence + cat2_guest_attendence) as grp2_count,								'0'  as grp3_count 								from school_attendence where school_id=? and  entry_date between ? and ?";		$atters = $this->db->query($atters_sql,array($school_id, $start_date,$end_date));		if($atters->num_rows()>0)		{			$attedata = $atters->row();						$group_1_attendence =  $attedata->grp1_count  ;			$group_2_attendence =  $attedata->grp2_count;			$group_3_attendence  =  $attedata->grp3_count;						$data['group_1_attendence'] =  $group_1_attendence;			$data['group_2_attendence'] =  $group_2_attendence;			$data['group_3_attendence']  =  $group_3_attendence;						 			$group_1_price =  $group_1_attendence * $group_1_per_day;			$group_2_price =  $group_2_attendence * $group_2_per_day;			$group_3_price =  $group_3_attendence * $group_3_per_day;						$data['group_1_price'] =  $group_1_price;			$data['group_2_price'] =  $group_2_price;			$data['group_3_price'] =  $group_3_price;									$attendece = $group_1_attendence + $group_2_attendence + $group_3_attendence;			$data['attendence'] = $attendece;		}			$result_set = array();			$allowed_amount  = $group_1_price + $group_2_price + $group_3_price; 			$total_attendence = $attendece ;			$result_set['eligible_amount'] = round($allowed_amount,0) ;			$result_set['total_attendence'] = $total_attendence ;						///Total Consumption of statement 			 $asql = "SELECT  sum( 								(`session_1_qty`*`session_1_price`) + 								(`session_2_qty`*`session_2_price`) + 								(`session_3_qty`*`session_3_price`) + 								(`session_4_qty`*`session_4_price`)  							) as consumed_amount 				from   balance_sheet where school_id=? and  entry_date between ? and ?";		$asrs  = $this->db->query($asql,array($school_id, $start_date,$end_date));		$asdata = $asrs->row();		$consumed_amount  = $asdata->consumed_amount;		$result_set['consumed_amount'] = round($consumed_amount,0) ;				$balance = $allowed_amount - $consumed_amount;		if($balance >= 0)		{			$eligible_balance_including_rice = "yes";		}		else if($balance < 0)		{			$eligible_balance_including_rice = "no";		}		$result_set['eligible_balance_including_rice'] = $eligible_balance_including_rice ;				/*$rset = $this->db->query("select  sum(TRUNCATE((quantity * purchase_price),0)) as purchased_amount  from 									purchases where school_id = ?  and quantity>0  									and purchase_date between ? and ?  ",array($school_info->school_id,$start_date,$end_date));	*/											//Purchases 		$pur_sql =  "select  sum(TRUNCATE((quantity * purchase_price),0)) as purchased_amount  from 									purchases where school_id = ?  and quantity>0  									and purchase_date between ? and ?  ";		$purchased_amount = $this->db->query($pur_sql,array($school_id, $start_date,$end_date))->row()->purchased_amount;		$result_set['purchased_amount'] = $purchased_amount ;				//Central Purchases & Rice items   				$pur_sql =  "select  sum(TRUNCATE((quantity * purchase_price),0)) as purchased_amount  from 									purchases where school_id = ?  and quantity>0   and item_id in(select item_id from civil_supplier_items)									and purchase_date between ? and ?  ";																				/*$pur_sql = "select 								TRUNCATE(sum(purchase_quantity * purchase_price),0) as purchased_amount from  balance_sheet  								  where school_id=?  and entry_date between ? and ?									and item_id in(select item_id from civil_supplier_items)								  ";								  */								  //Rice Item 77 		$rice_purchased_amount = $this->db->query($pur_sql,array($school_id, $start_date,$end_date))->row()->purchased_amount;		$result_set['district_level_amount'] = $rice_purchased_amount ;		//9 - 10 		$result_set['total_amount_claimed_by_warden'] = round($result_set['purchased_amount'] - $result_set['district_level_amount'],0);				$result_set['total_amount_diet_related_purchases'] =round($result_set['purchased_amount'] - $result_set['district_level_amount'],0);						return $result_set;			 }	 	 	private function savelog($permited = '')	{		$params['posted_data'] = $_POST;		$params['username'] = $this->input->get_request_header("username");		$params['password'] = $this->input->get_request_header("password");				$insert_data = array('url_accessed'=>current_url(),							'parameters'=>serialize($params),							'permitted'=>$permited,							'ip_address'=>$this->input->ip_address()							);		$this->db->insert("cgg_webservice_logs",$insert_data);					}	private function get_school_info($ehostel_id)	{		$rs = $this->db->query("select * from schools where ehostel_id=?",array($ehostel_id));		if($rs->num_rows()==0)		{			$this->savelog('Ehostel id not found : '.$ehostel_id);			header('HTTP/1.0 404 Bad Request'); 						send_json_result([							'error_code' =>  404 ,							'status' =>  false , 							'message' => 'Invalid Ehostel id : '.$ehostel_id 						] ); // NOT_FOUND (404) being the HTTP response code		}else		{			$school_info = $rs->row();			return $school_info;		}	}	 private function check_access(){		$username = trim($this->input->get_request_header('username'));		$password =  trim($this->input->get_request_header('password')); 		if($username == "" || $password ==""    )		{			$this->savelog('Header Parameters missing');						header('HTTP/1.0 400 Bad Request'); 			send_json_result([                'error_code' =>  400 ,                 'message' => 'Header Parameters missing'            ] ); // NOT_FOUND (404) being the HTTP response code		}				//Check access 		$user_access_rs = $this->db->query("select * from cgg_webservice_credentials where username=? and password=?",array($username,$password));		if($user_access_rs->num_rows()==0)		{			$this->savelog('Invalid credentials');			header('HTTP/1.0 401 Unauthorized Access'); 			send_json_result([                'error_code' =>  401 ,                 'message' => 'Access denied - invalid credentials - '.$this->input->ip_address()            ] );			die;		}}	private function biometric($date,$school_id)	{		 		//return array();		$ddo_codes = array();		$ehostel_ids  = array();		$ddo_rs = $this->db->query("select * from schools where is_school='1'");		foreach($ddo_rs->result() as $ddorow)		{			$ddo_codes[$ddorow->school_id] = $ddorow->school_code;			$ehostel_ids[$ddorow->school_id] = $ddorow->ehostel_id;		}										$rset = $this->db->query("select school_id, classwise_data,entry_date  from school_attendence 												where entry_date between ? and last_day(?)  and school_id=?  ",array($date,$date,$school_id));								 				$ehostel_biometric= array();								foreach($rset->result() as $att_row)				{					$row = array();					$school_id  = $att_row->school_id;					$row['ehostel_id']  =  @$ehostel_ids[$att_row->school_id] ;					$row['ddo_code']  =  @$ddo_codes[$att_row->school_id]; 					 $class_wise_biometric = array("1"=>0,"2"=>0,"3"=>0,"4"=>0,"5"=>0,"6"=>0,"7"=>0,"8"=>0,"9"=>0,"10"=>0);					$classes_serelized = unserialize($att_row->classwise_data); 					 foreach($class_wise_biometric as $class_key=>$class_count)					 {						$class_wise_biometric[$class_key] = intval(@$classes_serelized[$class_key]);					 } 					 $classes_array = array();					 foreach($class_wise_biometric as $class_key=>$class_count)					 {						$previous_count =  intval(@$ehostel_biometric['class_'.$class_key."_count"] ); 						$ehostel_biometric['class_'.$class_key."_count"] = $previous_count +  $class_count; 					 } 				}				 								return $ehostel_biometric;				 	} 	///////////////////////////	private function get_price_detais($school_id,$item_id,$ob_qty,$purchased_data=array())	{		  		 $cbalance = $ob_qty;		$purchase_entries = $purchased_data[$school_id][$item_id];				$usable_entries= array();		 $final_price = 0;				if(isset($purchase_entries )){				foreach($purchase_entries  as $row)				{										$ctemp  =  $cbalance;					$cbalance = $cbalance - $row['qty'];					if($cbalance<0)					{						$allowed_to_use  = $ctemp;					}					else {												$allowed_to_use  =  $row['qty'];					}										 					if($allowed_to_use>0){						$usable_entries[] = array('purchase_quantity'=>$row['qty'],'remaing_to_use'=>$allowed_to_use,'purchase_price'=>$row['purchase_price'],'purchase_date'=>$row['purchase_date']);					}					 if($cbalance<0)					{						 break;					}					 				}															$total_quantity = 0;				$total_price = 0;				// print_a($usable_entries);				foreach($usable_entries as $trow)				{					 					$total_quantity = $total_quantity + $trow['remaing_to_use'];					 $total_price =  $total_price +  ($trow['remaing_to_use'] *  $trow['purchase_price']);									}				//echo "<br>",$total_quantity ,"---",$total_price; 				if($total_quantity ==0)				{					return 0;				}				$final_price = $total_price/$total_quantity;				 		}else		{			$final_price = 0;//or else check atleast one price 		}			/*if($item_id==213)		{			 echo "---",$ob_qty; 			print_a($purchase_entries);			print_a($usable_entries);			//echo "::",$final_price,"--<br>"; 		}*/				//echo "::",$final_price,"--<br>"; 		return floatval($final_price); 	}
}
